local camera = require "orthographic.camera"
local platypus = require "platypus.platypus"
local state = require "in.state"
local mapper = require "in.mapper"

go.property("player_id", 1)
go.property("autorun", false)

local JUMP = hash("jump")
local LEFT = hash("left")
local RIGHT = hash("right")

local CAMERA = hash("/camera")

local VELOCITY = 75

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "disable")
	state.clear()
	--camera.follow(CAMERA, go.get_id(), 0.8)
	--camera.deadzone(CAMERA, 100, 800, 100, 200)
	mapper.bind(hash("key_space"), JUMP, self.player_id)
	mapper.bind(hash("key_left"), LEFT, self.player_id)
	mapper.bind(hash("key_right"), RIGHT, self.player_id)
	self.platformer = platypus.create({
		collisions = {
			ground = { hash("ground") },
			left = 3, right = 3, top = 3, bottom = 3,
		},
		gravity = -500,
		max_velocity = 400
	})
	self.direction = 1
	if self.autorun then
		self.platformer.right(VELOCITY)
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if self.platformer.wall_contact and self.platformer.ground_contact then
		self.direction = -self.direction
	end
	--print("update", self.ladder_contact)
	if self.ladder_contact and state.is_pressed(JUMP) then
		self.platformer.up(VELOCITY)
		print("no gravity")
		self.platformer.gravity = 0
		--local pos = go.get_position()
		--local diff = pos.x - ((math.floor(pos.x / 8) * 8))
		--self.platformer.move(vmath.vector3(0, VELOCITY, 0))
		
	else
		self.platformer.gravity = -500
		if self.autorun then
			if self.direction == 1 then
				self.platformer.right(VELOCITY)
			elseif self.direction == -1 then
				self.platformer.left(VELOCITY)
			end
		else
			--print("gc", self.platformer.ground_contact)
			if state.is_pressed(LEFT) then
				self.platformer.left(VELOCITY)
			elseif state.is_pressed(RIGHT) then
				self.platformer.right(VELOCITY)
			end
		end
	end

	self.ladder_contact = false

	self.platformer.update(dt)
end

function on_message(self, message_id, message, sender)
	self.platformer.on_message(message_id, message)
	if message_id == hash("contact_point_response") then
		--print(message.normal)
		
	elseif message_id == hash("collision_response") then
		if message.group == hash("ladder") then
			self.ladder_contact = true
		elseif message.group == hash("diamond") then
			msg.post("game:/game", "collect_diamond")
			msg.post("level", "delete", { id = message.other_id })
			go.delete(message.other_id)
		end
	elseif message_id == hash("showing_dialog") then
		--self.platformer.stop()
		state.on_input(LEFT, { released = true })
		state.on_input(RIGHT, { released = true })
	end
end

function on_input(self, action_id, action)
	action_id = mapper.on_input(action_id, self.player_id)
	state.on_input(action_id, action)
	if action_id == JUMP and action.pressed and not self.ladder_contact then
		print("ladder", self.ladder_contact)
		self.platformer.jump(130, true, true)
		if self.platformer.wall_jumping then
			self.direction = -self.direction
		end
	end
	--print(action_id)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
