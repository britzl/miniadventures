local camera = require "orthographic.camera"
local platformer = require "ludobits.m.platformer"
local state = require "in.state"
local mapper = require "in.mapper"

go.property("player_id", 1)
go.property("autorun", false)

local JUMP = hash("jump")
local LEFT = hash("left")
local RIGHT = hash("right")

local CAMERA = hash("/camera")

local VELOCITY = 75

function init(self)
	msg.post(".", "acquire_input_focus")
	--camera.follow(CAMERA, go.get_id(), 0.8)
	--camera.deadzone(CAMERA, 100, 800, 100, 200)
	mapper.bind(hash("key_space"), JUMP, self.player_id)
	mapper.bind(hash("key_left"), LEFT, self.player_id)
	mapper.bind(hash("key_right"), RIGHT, self.player_id)
	self.platformer = platformer.create({ hash("ground") })
	self.platformer.gravity = -500
	self.direction = 1
	if self.autorun then
		self.platformer.right(VELOCITY)
	end
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	self.platformer.update(dt)


	if self.platformer.wall_contact and self.platformer.ground_contact then
		self.direction = -self.direction
	end
	if self.ladder_contact and state.is_pressed(JUMP) then
		local pos = go.get_position()
		local diff = pos.x - ((math.floor(pos.x / 8) * 8))
		self.platformer.move(vmath.vector3(0, VELOCITY, 0))
		--self.platformer.move(vmath.vector3(diff * VELOCITY / 8, VELOCITY, 0))
	else
		if self.autorun then
			if self.direction == 1 then
				self.platformer.right(VELOCITY)
			elseif self.direction == -1 then
				self.platformer.left(VELOCITY)
			end
		else
			--print("gc", self.platformer.ground_contact)
			if state.is_pressed(LEFT) then
				self.platformer.left(VELOCITY)
			elseif state.is_pressed(RIGHT) then
				self.platformer.right(VELOCITY)
			else
				self.platformer.stop()
			end
		end
	end

	self.ladder_contact = false
end

function on_message(self, message_id, message, sender)
	self.platformer.on_message(message_id, message)
	if message_id == hash("contact_point_response") then
		--print(message.normal)
		
	elseif message_id == hash("collision_response") then
		if message.group == hash("ladder") then
			self.ladder_contact = true
		elseif message.group == hash("diamond") then
			msg.post("game:/game", "collect_diamond")
			go.delete(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	action_id = mapper.on_input(action_id, self.player_id)
	state.on_input(action_id, action)
	if action_id == JUMP and action.pressed then
		--print("gc", self.platformer.ground_contact, "wc", self.platformer.wall_contact)
		self.platformer.jump(130, true, true)
		--print("wj", self.platformer.wall_jumping)
		if self.platformer.wall_jumping then
			self.direction = -self.direction
		end
	end
	--print(action_id)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
